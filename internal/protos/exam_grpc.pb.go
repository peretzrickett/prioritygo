// go generate protoc internal/protos/exam.proto --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: internal/protos/exam.proto

package exam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Exam_GetEmployeeByID_FullMethodName   = "/priority.exam.Exam/GetEmployeeByID"
	Exam_GetEmployeeList_FullMethodName   = "/priority.exam.Exam/GetEmployeeList"
	Exam_GetDepartmentByID_FullMethodName = "/priority.exam.Exam/GetDepartmentByID"
	Exam_GetDepartmentList_FullMethodName = "/priority.exam.Exam/GetDepartmentList"
	Exam_GetProjectByID_FullMethodName    = "/priority.exam.Exam/GetProjectByID"
	Exam_GetProjectList_FullMethodName    = "/priority.exam.Exam/GetProjectList"
)

// ExamClient is the client API for Exam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExamClient interface {
	GetEmployeeByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Employee, error)
	GetEmployeeList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Employees, error)
	GetDepartmentByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Department, error)
	GetDepartmentList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Departments, error)
	GetProjectByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Project, error)
	GetProjectList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Projects, error)
}

type examClient struct {
	cc grpc.ClientConnInterface
}

func NewExamClient(cc grpc.ClientConnInterface) ExamClient {
	return &examClient{cc}
}

func (c *examClient) GetEmployeeByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, Exam_GetEmployeeByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examClient) GetEmployeeList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Employees, error) {
	out := new(Employees)
	err := c.cc.Invoke(ctx, Exam_GetEmployeeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examClient) GetDepartmentByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, Exam_GetDepartmentByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examClient) GetDepartmentList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Departments, error) {
	out := new(Departments)
	err := c.cc.Invoke(ctx, Exam_GetDepartmentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examClient) GetProjectByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, Exam_GetProjectByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examClient) GetProjectList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Projects, error) {
	out := new(Projects)
	err := c.cc.Invoke(ctx, Exam_GetProjectList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExamServer is the server API for Exam service.
// All implementations must embed UnimplementedExamServer
// for forward compatibility
type ExamServer interface {
	GetEmployeeByID(context.Context, *ID) (*Employee, error)
	GetEmployeeList(context.Context, *Empty) (*Employees, error)
	GetDepartmentByID(context.Context, *ID) (*Department, error)
	GetDepartmentList(context.Context, *Empty) (*Departments, error)
	GetProjectByID(context.Context, *ID) (*Project, error)
	GetProjectList(context.Context, *Empty) (*Projects, error)
	mustEmbedUnimplementedExamServer()
}

// UnimplementedExamServer must be embedded to have forward compatible implementations.
type UnimplementedExamServer struct {
}

func (UnimplementedExamServer) GetEmployeeByID(context.Context, *ID) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeByID not implemented")
}
func (UnimplementedExamServer) GetEmployeeList(context.Context, *Empty) (*Employees, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeList not implemented")
}
func (UnimplementedExamServer) GetDepartmentByID(context.Context, *ID) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentByID not implemented")
}
func (UnimplementedExamServer) GetDepartmentList(context.Context, *Empty) (*Departments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentList not implemented")
}
func (UnimplementedExamServer) GetProjectByID(context.Context, *ID) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByID not implemented")
}
func (UnimplementedExamServer) GetProjectList(context.Context, *Empty) (*Projects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectList not implemented")
}
func (UnimplementedExamServer) mustEmbedUnimplementedExamServer() {}

// UnsafeExamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExamServer will
// result in compilation errors.
type UnsafeExamServer interface {
	mustEmbedUnimplementedExamServer()
}

func RegisterExamServer(s grpc.ServiceRegistrar, srv ExamServer) {
	s.RegisterService(&Exam_ServiceDesc, srv)
}

func _Exam_GetEmployeeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServer).GetEmployeeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exam_GetEmployeeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServer).GetEmployeeByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exam_GetEmployeeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServer).GetEmployeeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exam_GetEmployeeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServer).GetEmployeeList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exam_GetDepartmentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServer).GetDepartmentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exam_GetDepartmentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServer).GetDepartmentByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exam_GetDepartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServer).GetDepartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exam_GetDepartmentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServer).GetDepartmentList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exam_GetProjectByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServer).GetProjectByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exam_GetProjectByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServer).GetProjectByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exam_GetProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServer).GetProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exam_GetProjectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServer).GetProjectList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Exam_ServiceDesc is the grpc.ServiceDesc for Exam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "priority.exam.Exam",
	HandlerType: (*ExamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmployeeByID",
			Handler:    _Exam_GetEmployeeByID_Handler,
		},
		{
			MethodName: "GetEmployeeList",
			Handler:    _Exam_GetEmployeeList_Handler,
		},
		{
			MethodName: "GetDepartmentByID",
			Handler:    _Exam_GetDepartmentByID_Handler,
		},
		{
			MethodName: "GetDepartmentList",
			Handler:    _Exam_GetDepartmentList_Handler,
		},
		{
			MethodName: "GetProjectByID",
			Handler:    _Exam_GetProjectByID_Handler,
		},
		{
			MethodName: "GetProjectList",
			Handler:    _Exam_GetProjectList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protos/exam.proto",
}
